# ############################################################################
# Model: Diffusion-BERT 
# Tokens: 
# losses: 
# Training: Librispeech 960h
# Authors:  Pooneh Mousavi 2023
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 74443
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/diffusion-bert/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
#BERT tokenizer. However, a local path pointing to a
lm_source: bert-base-uncased
lm_folder: !ref <save_folder>/bert
timestep: layerwise

max_length : 128
hybrid_lambda: 1e-2
predict_x0: True
pretrained_model: !ref bert-base-uncased
eval_step_size : 4
# Data files
data_folder: ./data/LibriSpeech # e.g., /path/to/LibriSpeech
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
# train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
train_splits: ["train-clean-100"]

dev_splits: ["dev-clean"]
# test_splits: ["test-clean", "test-other"]
test_splits: ["test-clean"]
skip_prep: False
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev-clean.csv
# test_csv:
#     - !ref <output_folder>/test-clean.csv
#     - !ref <output_folder>/test-other.csv
test_csv: 
    - !ref <output_folder>/test-clean.csv

# Samples setting
sample_folder: !ref <output_folder>/samples/
n_samples: 10
temperature : 0.1
topk: 30
seq_len: 32


ckpt_interval_minutes: 30 # save checkpoint every N min

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 10
batch_size: 32 # This works for 1x GPU with 40GB with no dynamic batching
test_batch_size: 32
grad_accumulation_factor: 1
max_grad_norm: 5.0
loss_reduction: 'batchmean'
sorting: random
num_workers: 4

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: False
max_batch_len: 600
max_batch_len_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200

dynamic_batch_sampler:
    max_batch_len: !ref <max_batch_len>
    max_batch_len_val: !ref <max_batch_len_val>
    num_buckets: !ref <num_bucket>
    shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
    batch_ordering: random
    max_batch_ex: 128

# stages related parameters
lr_adam: 1e-1

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: !ref <test_batch_size>

test_dataloader_opts:
    batch_size: !ref <test_batch_size>
####################### Difussion parameters ###########################
schedule: mutual
num_steps: 2048
word_freq_lambda : 0.3
load_step : -1
from_scratch: False

sample_cls: !new:sample.Categorical

lm_model: !new:model.hf_LM_model.HuggingFace_LM
    source: !ref <lm_source>
    save_path: !ref <lm_folder>
    timestep: !ref <timestep>
    num_steps: !ref <num_steps>


# diffusion_schedule: !name:diffusion_word_freq.create_discrete_diffusion_schedule
#     kind: !ref <schedule>
#     num_steps: !ref <num_steps>

# diffusion_instance: !new:diffusion_word_freq.MaskDiffusion
#     dim: 20224
#     tokenizer: !ref <tokenizer>.tokenizer
#     schedule: !ref <diffusion_schedule>()
#     sample_cls : None
#     word_freq_lambda : 0.1
#     device: 'cuda'

modules:
   model: !ref <lm_model>

model: !new:torch.nn.ModuleList
   - [!ref <lm_model>]


# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: !ref <lr_adam>
    betas: (0.9, 0.98)
    eps: 0.000000001



log_softmax: !new:torch.nn.LogSoftmax
    dim: -1


# seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    # label_smoothing: !ref <label_smoothing>
    # reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 25000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>





       